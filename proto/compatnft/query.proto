syntax = "proto3";
package devashishdxt.cryptonft.compatnft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "compatnft/params.proto";
import "compatnft/compatnft.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/devashishdxt/crypto-nft/x/compatnft/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/devashishdxt/cryptonft/compatnft/params";
  }

  // Supply queries the total supply of a given denom or owner
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get = "/devashishdxt/cryptonft/compatnft/collections/{denom_id}/supply";
  }

  // Owner queries the NFTs of the specified owner
	rpc Owner(QueryOwnerRequest) returns (QueryOwnerResponse) {
		option (google.api.http).get = "/devashishdxt/cryptonft/compatnft/nfts";
	}

  // Queries a list of Collection items.
	rpc Collection(QueryCollectionRequest) returns (QueryCollectionResponse) {
		option (google.api.http).get = "/devashishdxt/cryptonft/compatnft/collections/{denom_id}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QuerySupplyRequest is the request type for the Query/Supply RPC method
message QuerySupplyRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
  uint64 amount = 1;
}

// QueryOwnerRequest is the request type for the Query/Owner RPC method
message QueryOwnerRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string owner = 2 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryOwnerResponse is the response type for the Query/Owner RPC method
message QueryOwnerResponse {
  Owner owner = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryCollectionRequest is the request type for the Query/Collection RPC method
message QueryCollectionRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryCollectionResponse is the response type for the Query/Collection RPC method
message QueryCollectionResponse {
  Collection collection = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
