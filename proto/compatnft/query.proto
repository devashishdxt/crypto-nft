syntax = "proto3";
package devashishdxt.cryptonft.compatnft;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "compatnft/params.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/devashishdxt/crypto-nft/x/compatnft/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/devashishdxt/cryptonft/compatnft/params";
  }

  // Supply queries the total supply of a given denom or owner
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get = "/chainmain/nft/collections/{denom_id}/supply";
}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QuerySupplyRequest is the request type for the Query/Supply RPC method
message QuerySupplyRequest {
  string denom_id = 1 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
  string owner = 2;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
  uint64 amount = 1;
}

// this line is used by starport scaffolding # 3
